import unittest

import pandas as pd
from pcfg import PCFG
from sympy import sympify

from src.evaluate_equation import infix_to_prefix, map_equation_to_syntax_tree, evaluate_equation
from src.fit_func_gplearn import gp_program_to_prefix
from src.syntax_tree.syntax_tree import SyntaxTree
from src.utils.logging import get_log_obj
from sympy.simplify import simplify

def get_empty_list(arg):
    return []


class TestSyntaxTree(unittest.TestCase):
    def setUp(self) -> None:
        class Namespace():
            def __init__(self):
                pass

        self.args = Namespace()
        self.args.logging_level = 40
        self.args.max_branching_factor = 2
        self.args.max_depth_of_tree = 10
        self.args.max_constants_in_tree = 5
        self.args.number_equations = 10
        self.args.num_calls_sampling = 10
        self.args.max_num_nodes_in_syntax_tree = 30
        self.args.sample_with_noise = False
        self.args.how_to_select_node_to_delete = 'random'

        self.args.precision = 'float32'
        self.logger = get_log_obj(args=self.args, name='test_logger')



    def test_gp_learn_2(self):
        str =  'abs ( ( 1 /  abs (  abs ( ( x_1 / x_0 )  )  )  )  ) '
        result = map_equation_to_syntax_tree(self.args, str, infix=True,
                                           catch_exceptions=True)
        self.assertEqual(" abs  / 1  abs  abs  / x_1 x_0  ", result.rearrange_equation_prefix_notation()[1])

    def test_gp_learn_2_5(self):
        str =  'sin x_1^4  '
        result = map_equation_to_syntax_tree(self.args, str, infix=True,
                                           catch_exceptions=True)
        self.assertEqual(" sin  ** x_1 4 ", result.rearrange_equation_prefix_notation()[1])

    def test_gp_learn_2_6(self):
        str =  'x_1^sin 4  '
        result = map_equation_to_syntax_tree(self.args, str, infix=True,
                                           catch_exceptions=True)
        self.assertEqual(" ** x_1  sin 4 ", result.rearrange_equation_prefix_notation()[1])


    def test_gp_learn_3(self):
        str =  ' '.join(['(', 'x_1', '+', '1.0', ')', '^', 'tan', '(', 'x_0', ')'])
        result = map_equation_to_syntax_tree(self.args, str, infix=True,
                                           catch_exceptions=True)
        self.assertEqual(" **  + x_1 1.0   tan x_0 ", result.rearrange_equation_prefix_notation()[1])

    def test_gp_learn_4(self):
        string = 'tan x^4 '
        result = map_equation_to_syntax_tree(self.args, string, infix=True,
                                           catch_exceptions=True)
        self.assertEqual(" tan  ** x 4 ", result.rearrange_equation_prefix_notation()[1])

    def test_gp_learn_5(self):
        string = 'tan x^4 * 5'
        result = map_equation_to_syntax_tree(self.args, string, infix=True,
                                           catch_exceptions=True)
        self.assertEqual(" *  tan  ** x 4  5 ", result.rearrange_equation_prefix_notation()[1])

    def test_gp_learn_6(self):
        string = ' 5 * tan x^4 '
        result = map_equation_to_syntax_tree(self.args, string, infix=True,
                                           catch_exceptions=True)
        self.assertEqual(" * 5  tan  ** x 4  ", result.rearrange_equation_prefix_notation()[1])

    def test_tree(self):
        string = ' abs  abs  *  sin x_2  **  abs  +  +  cos x_2  abs  +  **  / -32.43219838248628 x_2  0.5   cos x_2   x_1   abs  sin x_2  '
        result = map_equation_to_syntax_tree(self.args, string, infix=True,
                                           catch_exceptions=True)

        self.assertEqual(
            string,
            result.rearrange_equation_prefix_notation()[1])

    def test_tree_2(self):
        string = ' + + + + + + + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + + 0 0 + 0 0 + + 0 0 + 0 0 + + + 0 0 + 0 0 + + 0 0 + 0 0  '
        tree = map_equation_to_syntax_tree(self.args, string, infix=True,
                                           catch_exceptions=True)
        print(f"Syntax tree has {len(set([tree.dict_of_nodes[key].node_id for key in tree.dict_of_nodes]))} unique node ids it shoud have {len(list(tree.dict_of_nodes))} ")
        tree.print()

    def test_tree_3(self):
        X_df = pd.DataFrame({'x_0': {51265: 1.7451909545795194, 73884: 4.191821479531058, 14664: 4.504036477018887, 66171: 1.8090658027172009, 66295: 1.6578716812733436, 4425: 4.953350443921078,
                                  78921: 1.5258213176269444, 4655: 3.3700788611281807, 83813: 2.942037386165284, 50253: 4.299519276688572, 50521: 2.7889545984057915, 45096: 2.7167964785807084, 86440: 4.5437834151799175, 81976: 4.254120902612467, 80285: 2.362171375157309, 44808: 4.894250362203972, 74007: 4.966237823163062, 95572: 2.0671874762638707, 95350: 3.0853311698976515, 26549: 3.2932315944947024, 31186: 2.991018377400542, 32500: 1.8528357430746367, 27954: 2.6016553109580047, 38259: 1.5711660717089355, 20159: 4.441300466785496, 48652: 4.2911950608778655, 62616: 4.490574730716451, 70029: 1.7139387479822208, 29449: 4.276097986466668, 35206: 1.5202419593402028, 42020: 2.0577949212593665, 91124: 4.671609065091287, 3582: 4.656147793062979, 53227: 2.012546898850525, 73097: 3.2584763880912004, 27712: 4.8121555838201, 60005: 4.516947338264925, 45862: 2.967257278442629, 99940: 3.713962565668568, 95690: 1.2112963618483228, 32239: 3.6408812162329567, 43959: 3.7975247631261935, 91832: 4.116503309522298, 83691: 4.539640276654192, 62122: 4.010797762619143, 46535: 4.040442014028248, 38806: 4.026273111103629, 63373: 1.8723958001934389, 52589: 4.2322519703816495, 44303: 3.8325237764480606, 34245: 2.103536343644136, 28324: 2.268322848694732, 79336: 4.64104045996724, 3885: 2.5168390301297485, 32893: 1.5553698596315813, 90049: 3.580338858165085, 35198: 3.143945672943284, 69677: 2.8951462035550897, 20823: 1.4292473066376323, 3026: 3.295287830249669, 94166: 1.0758023664784218, 28100: 1.645982310516414, 65407: 4.858717315170973, 49135: 2.530130670481539, 22321: 3.4555155186463526, 19512: 1.6570722987854791, 40109: 3.24242135988895, 7413: 4.463817973626039, 90720: 3.433037455117132, 69132: 2.440994971212805, 86902: 1.2049415330601403, 23942: 4.550691081229775, 29876: 4.372792333843273, 33518: 3.0119103826907403, 12868: 1.864619153914888, 98809: 2.691952457896586, 69884: 1.9401310694947589, 89805: 4.203969125524576, 47173: 4.914551888314908, 55407: 3.7759938405221343, 16479: 2.133418832374584, 70123: 3.4037213307048, 83141: 4.421235618079304, 21550: 4.626464762770028, 28167: 3.5725505363246137, 21333: 3.4171687625486946, 17226: 2.260159886607997, 16820: 4.805109969408045, 16750: 2.4383892882580835, 16150: 3.124604128124464, 30510: 1.003260710296697, 30055: 4.047254065895242, 87379: 3.870652748228254, 32543: 3.311039159545848, 70715: 3.2955432776341365, 35416: 4.746946640050485, 52242: 1.529089299378679, 10685: 4.119358443301531, 42282: 4.118627204628778, 66691: 3.505520531873554, 1331: 2.2859531239996898, 16201: 2.4546959760034786, 6026: 4.0678058741685215, 59416: 2.738708300413769, 11951: 4.062517504279324, 59948: 2.8759529590930484, 61991: 1.1879438791463202, 18632: 1.868746713132604, 76125: 4.918732769260549, 39856: 1.800643502893278, 2216: 2.5340661303003853, 11216: 1.2637457145056832, 822: 2.4263002822134534, 76195: 2.8964003025641163, 28809: 4.886996001981591, 77927: 1.1577933496221826, 34060: 4.689098851421424, 89926: 2.766610475213275, 55800: 3.3482544812200112, 9221: 3.4426089383021585, 54234: 3.918509419971538, 50216: 1.0526937331705932, 75351: 1.159701365885749, 54214: 2.3620670909090697, 22312: 2.742100972076348, 57836: 3.2602366707821875, 56727: 3.0529534440342485, 15630: 2.833033913125357, 6642: 4.686818390908399, 46004: 1.6998633504360998, 47393: 3.4877802952439945, 60515: 1.817846072274908, 18294: 3.0429192213814624, 91959: 1.865661769039428, 44205: 4.529685682244934, 22072: 2.5328226680084875, 49200: 2.3882268228853256, 7341: 1.88864798330616, 78556: 4.441603950983543, 94411: 1.0777333719033255, 65667: 2.7928503305434145, 23286: 4.522754635134247, 58952: 1.1255208030715171, 60498: 1.5470952590373388, 1066: 2.4717781718380545, 69202: 3.038618555679042, 3854: 3.3606900918272204, 12987: 2.6280142028218845, 43895: 3.0365164113203145, 26493: 2.4478594477816293, 85270: 4.032431822906362, 57881: 3.2633690623628464, 47751: 2.5847866252722085, 75286: 2.4744787306104348, 4904: 2.246418854622136, 68685: 2.1009732120177143, 68371: 3.133006288280013, 68783: 3.848565286217679, 30999: 2.0283513277420178, 11980: 1.4881193847209238, 96669: 1.0727333672465391, 31180: 3.3219883174100016, 49392: 3.778914720425997, 30578: 4.913015466662795, 46869: 3.813120564749312, 345: 4.058147556012482}, 'x_1': {51265: 3.0257647705412323, 73884: 4.987444147143943, 14664: 1.5557798086673462, 66171: 3.4486709996078138, 66295: 4.016319747494872, 4425: 2.718866142961909, 78921: 2.017116915384689, 4655: 2.3389232475249417, 83813: 4.5941564869347244, 50253: 1.1461131211245337, 50521: 3.2045559011852127, 45096: 2.4693323347336404, 86440: 1.64186404730928, 81976: 4.2468752424872855, 80285: 2.9982327393078365, 44808: 1.7340530293689866, 74007: 1.201706613704734, 95572: 3.8512587528165874, 95350: 4.7814553963010376, 26549: 3.5401596575609435, 31186: 2.908169445964236, 32500: 1.201166378768916, 27954: 1.3931124794869074, 38259: 2.0059390923458578, 20159: 3.420753075107592, 48652: 1.7925281308552683, 62616: 4.551755062039037, 70029: 1.5406225890932892, 29449: 1.5628857353809646, 35206: 4.427929140793607, 42020: 4.830244273158681, 91124: 1.2796643182041525, 3582: 4.842319868687632, 53227: 2.1942280670433694, 73097: 2.3399067644705656, 27712: 4.574645305057435, 60005: 3.2083355953900283, 45862: 2.4980176084092016, 99940: 3.072177597668364, 95690: 4.14997703344509, 32239: 1.7109119541390148, 43959: 2.812207188045932, 91832: 2.600196932841181, 83691: 2.3168295182674847, 62122: 3.417925747640993, 46535: 4.072780659461868, 38806: 1.9083423797312404, 63373: 4.456381517318133, 52589: 3.817716630084057, 44303: 4.426832487724594, 34245: 1.8697354426538813, 28324: 2.758107204175933, 79336: 4.294876423286228, 3885: 3.005720835532527, 32893: 2.2062706232826144, 90049: 3.1357935459347, 35198: 1.504933799213231, 69677: 2.79103020047008, 20823: 1.866133249338312, 3026: 2.812490205481597, 94166: 2.0619703012690405, 28100: 2.024102939248605, 65407: 4.6855903881207945, 49135: 4.316336899754537, 22321: 4.258071510611094, 19512: 3.875226049912381, 40109: 3.835227453615369, 7413: 3.0288407005488374, 90720: 1.9413261664942096, 69132: 4.150064510699727, 86902: 1.2049934484231468, 23942: 4.63918823733405, 29876: 3.017471103306088, 33518: 3.1928902621396325, 12868: 4.287683915389497, 98809: 3.678531921782552, 69884: 2.7599825717101742, 89805: 2.524083600963492, 47173: 4.04498135658436, 55407: 2.7148357626850816, 16479: 2.033491484733012, 70123: 3.6307400554840425, 83141: 2.60554009670424, 21550: 1.5171966716297551, 28167: 1.1044956080849464, 21333: 2.7429910765761547, 17226: 3.6511954342130095, 16820: 1.5042395173320289, 16750: 4.25466436976088, 16150: 4.7000448016068965, 30510: 3.610510534707253, 30055: 3.9049116272893816, 87379: 1.2981467847192352, 32543: 2.5821951120473483, 70715: 4.112202789501302, 35416: 3.734072773276015, 52242: 2.9464047025769866, 10685: 3.4133343219930614, 42282: 1.89388712784655, 66691: 3.716101235935197, 1331: 2.000424671279712, 16201: 1.7137842458175057, 6026: 3.8078068791748456, 59416: 3.869773129371856, 11951: 2.4571429334534813, 59948: 2.263732430462058, 61991: 2.9945581442584954, 18632: 4.681465894661296, 76125: 3.1976648616454084, 39856: 3.853318613197505, 2216: 2.8310010773498813, 11216: 2.0780595423961348, 822: 1.1310236419287318, 76195: 1.3481156515311494, 28809: 3.5625040304847784, 77927: 4.204113172882104, 34060: 3.043112200050208, 89926: 4.201375512486484, 55800: 1.7268938741260516, 9221: 4.742306180979666, 54234: 2.361042164447112, 50216: 1.4537649136944562, 75351: 4.869332499282372, 54214: 1.2070133617502186, 22312: 4.046636980164855, 57836: 2.702737844489777, 56727: 3.550396371925185, 15630: 4.256638268562087, 6642: 1.4379419981538146, 46004: 3.07442568278004, 47393: 4.217712004311885, 60515: 3.7969470252638926, 18294: 2.4949242109504564, 91959: 1.1424998899209626, 44205: 1.0087112975389405, 22072: 3.505856647048516, 49200: 1.2276491441986068, 7341: 3.146398279866104, 78556: 2.730656617778388, 94411: 2.7674074365407835, 65667: 2.1946356824123874, 23286: 1.4788492877778898, 58952: 2.3299313764700247, 60498: 3.896967472242561, 1066: 1.5707571673608762, 69202: 2.740821271735704, 3854: 1.4555800064334772, 12987: 4.468062568609946, 43895: 4.424215658102688, 26493: 3.426283152207237, 85270: 2.627699177064732, 57881: 1.0948506319510924, 47751: 4.2937172325675865, 75286: 4.4570815012178135, 4904: 4.099530271575235, 68685: 2.6903423776914046, 68371: 3.210361284998178, 68783: 1.9883435419156128, 30999: 3.3730058303268047, 11980: 1.575508072625038, 96669: 4.637030693468624, 31180: 1.721284897227295, 49392: 1.7197407155282924, 30578: 4.505844933243798, 46869: 4.67516541377051, 345: 3.2001759313684723}, 'x_2': {51265: 1.5275423506154953, 73884: 4.6324641967354285, 14664: 2.015202458558193, 66171: 4.422168523269382, 66295: 1.3218594593286617, 4425: 3.382548454257708, 78921: 4.273161265288605, 4655: 3.682843200345944, 83813: 3.0055747666546906, 50253: 4.85492882878334, 50521: 1.424272361230921, 45096: 2.4082233755644635, 86440: 2.2098854427550667, 81976: 1.8033244197456813, 80285: 1.7817848063667805, 44808: 4.817527412126727, 74007: 1.983827414217332, 95572: 3.6095189780685417, 95350: 1.511984540295228, 26549: 3.0344654389211825, 31186: 4.26269925733393, 32500: 3.1726310288545903, 27954: 4.015815189807444, 38259: 1.5789567426165825, 20159: 2.0190883157087023, 48652: 1.9935746937386165, 62616: 3.001511107743482, 70029: 3.3070499362145256, 29449: 1.4359053028601363, 35206: 4.940535312510223, 42020: 1.2599903064488802, 91124: 2.4543431976952887, 3582: 4.099540412029819, 53227: 4.611167394268208, 73097: 3.678772905867525, 27712: 4.7470560716602535, 60005: 4.321647597268678, 45862: 3.3043016590740693, 99940: 4.4172861338752565, 95690: 3.0429735114533174, 32239: 1.8260326701944165, 43959: 2.976668267328604, 91832: 2.5109275538568263, 83691: 1.6391879242973215, 62122: 3.1219392994087256, 46535: 4.434935719235465, 38806: 4.635581494911486, 63373: 2.4896701775243724, 52589: 2.3668276022120494, 44303: 4.901280126515378, 34245: 1.7518725205343435, 28324: 1.240156820994827, 79336: 3.881313709531324, 3885: 1.6961636624504195, 32893: 2.3045149247523344, 90049: 3.27099369234122, 35198: 3.322048262289776, 69677: 2.8408392308064063, 20823: 1.973043677349092, 3026: 3.9235662775761937, 94166: 4.944694402607085, 28100: 3.4104285620814885, 65407: 1.2861588198656957, 49135: 3.847818297135672, 22321: 4.124281691742818, 19512: 1.0802357126203408, 40109: 1.1843212527257811, 7413: 3.3008615152076293, 90720: 3.8478211023730498, 69132: 4.4744589650571465, 86902: 1.4337799012341588, 23942: 1.150165877571586, 29876: 1.78623968272713, 33518: 3.2466074377797205, 12868: 1.4924322500843608, 98809: 2.6450837028346235, 69884: 2.180220656893201, 89805: 1.6962022368105472, 47173: 4.148650653249808, 55407: 1.6892884730738107, 16479: 1.2895769235238057, 70123: 2.871877690473007, 83141: 2.2986790791362046, 21550: 4.749096116041752, 28167: 4.862152511315836, 21333: 2.3217291767961363, 17226: 4.141763513721645, 16820: 1.1810083052980451, 16750: 1.4808350190871369, 16150: 2.836908814671744, 30510: 1.2468769273321303, 30055: 1.0037759522472496, 87379: 4.282312477682778, 32543: 2.8356072769000087, 70715: 1.4800002250390984, 35416: 1.839226080867364, 52242: 4.989163283988232, 10685: 2.6313955871601618, 42282: 1.182920785860324, 66691: 4.818325936612446, 1331: 2.418366613811469, 16201: 3.6578026415171134, 6026: 3.23626467924856, 59416: 1.4743116490291062, 11951: 1.4206845665182852, 59948: 2.3054697363244454, 61991: 3.1574896434191024, 18632: 4.5732349932663565, 76125: 4.2551239746460565, 39856: 1.941511263330825, 2216: 4.328628981309727, 11216: 2.9921750160859903, 822: 2.6251012968862817, 76195: 4.887214314134343, 28809: 2.298740228068747, 77927: 2.2478213301302183, 34060: 3.313797448970349, 89926: 2.880377390695694, 55800: 1.6553875325974756, 9221: 1.1024329922623175, 54234: 4.3308957732204485, 50216: 4.677109779478089, 75351: 4.3340871339754985, 54214: 2.041840983131688, 22312: 3.521214989311344, 57836: 3.423292305442333, 56727: 4.5894112209746245, 15630: 1.1139552351115136, 6642: 3.851816182955596, 46004: 4.984485638412456, 47393: 1.6432113476712291, 60515: 3.4856675275782614, 18294: 3.7438717906040218, 91959: 1.8199756211935787, 44205: 4.942465320847688, 22072: 1.6348370827297931, 49200: 4.052539703501038, 7341: 2.1667414653547072, 78556: 1.5650566004772295, 94411: 4.0629007726841495, 65667: 4.8180049026758045, 23286: 4.806528117268679, 58952: 4.457371812476873, 60498: 3.870196992417836, 1066: 2.886004802197299, 69202: 4.504310129149996, 3854: 1.2952336530596047, 12987: 3.080583092879549, 43895: 4.968605644585295, 26493: 2.8808428976727423, 85270: 3.792848136252116, 57881: 1.456857955528076, 47751: 2.5541023896006263, 75286: 4.085651285278549, 4904: 4.1241682461455085, 68685: 3.481496614726173, 68371: 2.9649751863174463, 68783: 4.717352708165789, 30999: 3.849913382549634, 11980: 4.257304250211339, 96669: 4.511903630315482, 31180: 2.9136255658909063, 49392: 2.534126951062156, 30578: 4.345276509597763, 46869: 3.973704508570514, 345: 4.500389399218827}}
                            )
        Y_df = pd.Series({51265: 2.3724354232610443, 73884: 1.1399676587788392, 14664: 9.026407839533086, 66171: 0.7453275566506443, 66295: 1.962082290033882, 4425: 3.3841302509825923,
                     78921: 1.1122519919986686, 4655: 2.458219914278177, 83813: 1.33873536305936, 50253: 4.855002037994588, 50521: 3.839373952500989, 45096: 2.8705205683410053, 86440: 7.868474402234992, 81976: 3.490167980185777, 80285: 2.7782458694142016, 44808: 3.681115810841936, 74007: 13.08895705512199, 95572: 0.9343459461078482, 95350: 2.6814777371677843, 26549: 1.926181012649358, 31186: 1.5159837608019715, 32500: 3.0548792844937984, 27954: 2.9219294432370853, 38259: 3.1168362506146527, 20159: 4.040294126777912, 48652: 7.54500674911258, 62616: 2.0652040011057045, 70029: 2.113674711712952, 29449: 11.972214523364425, 35206: 0.436634364771365, 42020: 2.1244458271547413, 91124: 9.345768287618228, 3582: 1.4737301863802936, 53227: 1.249779002425316, 73097: 2.3784439123444208, 27712: 1.3923157640415194, 60005: 2.0468958991984016, 45862: 2.2587069509319955, 99940: 1.7195528980307666, 95690: 0.6026794953987759, 32239: 7.322344785540638, 43959: 2.850379797344147, 91832: 3.9615752807003815, 83691: 7.510666618301045, 62122: 2.3616936067677883, 46535: 1.405498529671593, 38806: 2.8597138815525494, 63373: 1.060360021325376, 52589: 2.9429377037366784, 44303: 1.1098444456984278, 34245: 4.035034266702905, 28324: 4.166745613150768, 79336: 1.749306074635672, 3885: 3.101836569112524, 32893: 1.9220967294574864, 90049: 2.1931929027348214, 35198: 3.951223240303354, 69677: 2.2942417362402843, 20823: 2.438978099335737, 3026: 1.8762953875820925, 94166: 0.6629648482006828, 28100: 1.4981782211988814, 65407: 5.065736317784568, 49135: 0.9571784870618172, 22321: 1.2363215660631068, 19512: 2.4871716216189346, 40109: 4.485270830028832, 7413: 2.805321292778918, 90720: 2.887653168984732, 69132: 0.8259454705371992, 86902: 4.382063523147753, 23942: 5.358642073026192, 29876: 5.09748396383691, 33518: 1.8256105732478232, 12868: 1.830849400910052, 98809: 1.7383343223696195, 69884: 2.025835368707688, 89805: 6.169614369804265, 47173: 1.84009566940782, 55407: 5.173253560968694, 16479: 5.111712052833039, 70123: 2.051033567977278, 83141: 4.638178135834504, 21550: 4.034375209759442, 28167: 4.179897949104029, 21333: 3.3714004631932832, 17226: 0.9390714854296596, 16820: 16.994690283606225, 16750: 2.4317052235096366, 16150: 1.4724057206900405, 30510: 1.4002367375716092, 30055: 6.487723608832992, 87379: 4.374837466581171, 32543: 2.8412473824986617, 70715: 3.402284156851185, 35416: 4.342864945146276, 52242: 0.6535707399850552, 10685: 2.88167157123434, 42282: 11.551080134370864, 66691: 1.2301233778986032, 1331: 2.968949756419851, 16201: 2.460374196261096, 6026: 2.0740591603234595, 59416: 3.0161354746479714, 11951: 7.312182643508782, 59948: 3.462399116252288, 61991: 0.7894072446863142, 18632: 0.5484347040100374, 76125: 2.271370255130188, 39856: 1.5122819617918717, 2216: 1.2992939468241922, 11216: 1.2770108424905484, 822: 5.1346006023921085, 76195: 2.7621669056610534, 28809: 3.7495279186394246, 77927: 0.7697943734587426, 34060: 2.9216307860562365, 89926: 1.4364383526216749, 55800: 7.359240538441832, 9221: 4.13738340682057, 54234: 2.407793780789589, 50216: 0.9727699789745584, 75351: 0.3452700976967758, 54214: 6.021963278682303, 22312: 1.209139818189989, 57836: 2.2140177057011603, 56727: 1.1772433224067085, 15630: 3.754024975745617, 6642: 5.316809156976028, 46004: 0.6969626906942681, 47393: 3.161976522199692, 60515: 0.8630112876053104, 18294: 2.046878039564227, 91959: 5.637558259329046, 44205: 5.708702614890963, 22072: 2.7766172569362952, 49200: 3.0161566676786387, 7341: 1.740644559629985, 78556: 6.530141017948679, 94411: 0.6022570324677576, 65667: 1.6595787186168731, 23286: 3.9978591755197352, 58952: 0.6809440079147712, 60498: 0.6445209992485286, 1066: 3.4259676797576684, 69202: 1.5464897751641364, 3854: 11.200157568026944, 12987: 1.1996523322313062, 43895: 0.8679299683113445, 26493: 1.5582011479431983, 85270: 2.5421771020385524, 57881: 12.85505612437032, 47751: 1.480924174775006, 75286: 0.8537912931062157, 4904: 0.8348340078304349, 68685: 1.4093759412730995, 68371: 2.0680744175741776, 68783: 2.5780358637380902, 30999: 0.9814202134935294, 11980: 1.3939985474781913, 96669: 0.322160189674923, 31180: 4.161898377917184, 49392: 5.448232321693666, 30578: 1.5766465336708302, 46869: 1.2896380998303203, 345: 1.7704503617192269}
        , name='y')
        gp_prefix = ' sqrt *  - 0  + - 23.69988057817831 -20.535643751738306 / x_0 cos sin -20.535643751738306 / x_0 * ** x_1 2.0 * * tan 28.659350247743618 x_2 x_2'
        tree = map_equation_to_syntax_tree(self.args, gp_prefix, infix=True,
                                           catch_exceptions=True)
        infix = tree.rearrange_equation_infix_notation()[1]
        sympy_infix = str(sympify(infix))
        sympy_tree = map_equation_to_syntax_tree(self.args, sympy_infix, infix=True)
        output = evaluate_equation(self.args, sympy_tree, X_df, Y_df)

        
